return(mapping)
}
fun_irrelavant_cat_key <- function(cat, mapping) {
if (mapping == 0) {
correctkey <- case_when(
cat %in% c("y", "s", "w") ~ "f",
cat %in% c("o", "b", "l") ~ "j"
)
} else {
correctkey <- case_when(
cat %in% c("y", "s", "w") ~ "j",
cat %in% c("o", "b", "l") ~ "f"
)
}
return(correctkey)
}
bigdf <- bigdf %>%
mutate(# fot the congruency effect on nontarget images
target_img_id = pmap(list(stim, image_up_id, image_mid_id, image_low_id, 1), fun_arrangeimages),
nontarget_img1_id = pmap(list(stim, image_up_id, image_mid_id, image_low_id, 2), fun_arrangeimages),
nontarget_img2_id = pmap(list(stim, image_up_id, image_mid_id, image_low_id, 3), fun_arrangeimages),
target_img_cat = map2_chr(target_img_id, rule, fun_category),
nontarget_img1_cat = map2_chr(nontarget_img1_id, rule, fun_category),
nontarget_img2_cat = map2_chr(nontarget_img2_id, rule, fun_category),
incongruence_score_stim = case_when(
target_img_cat == nontarget_img1_cat & target_img_cat == nontarget_img2_cat ~ 0,
target_img_cat != nontarget_img1_cat & target_img_cat != nontarget_img2_cat ~ 2,
TRUE ~ 1
),
# for the congruency effect on irrelavant rules
target_img_allcat = map(target_img_id, fun_fullcat),
target_img_irrelavantcat1 = pmap(list(target_img_allcat, target_img_cat, 1), fun_irrelavant_cat),
target_img_irrelavantcat2 = pmap(list(target_img_allcat, target_img_cat, 2), fun_irrelavant_cat),
target_img_irrelavantcat1_mapping = pmap(list(target_img_irrelavantcat1, resp_map_age, resp_map_size, resp_map_location), fun_irrelavant_cat_mapping),
target_img_irrelavantcat2_mapping = pmap(list(target_img_irrelavantcat2, resp_map_age, resp_map_size, resp_map_location), fun_irrelavant_cat_mapping),
target_img_irrelavantcat1_key = map2(target_img_irrelavantcat1,  target_img_irrelavantcat1_mapping, fun_irrelavant_cat_key),
target_img_irrelavantcat2_key = map2(target_img_irrelavantcat2,  target_img_irrelavantcat2_mapping, fun_irrelavant_cat_key),
incongruence_score_rule = case_when(
correct_key == target_img_irrelavantcat1_key & correct_key == target_img_irrelavantcat2_key ~ 0,
correct_key != target_img_irrelavantcat1_key & correct_key != target_img_irrelavantcat2_key ~ 2,
TRUE ~ 1
)
) %>%
select(!(target_img_id:nontarget_img2_cat)) %>%
select(!(target_img_allcat:target_img_irrelavantcat2_key))
warnings()
fun_irrelavant_cat_key <- function(cat, mapping) {
if (mapping == 0) {
correctkey <- case_when(
cat %in% c("y", "s", "w") ~ 1,
cat %in% c("o", "b", "l") ~ 2
)
} else {
correctkey <- case_when(
cat %in% c("y", "s", "w") ~ 2,
cat %in% c("o", "b", "l") ~ 1
)
}
return(correctkey)
}
bigdf <- bigdf %>%
mutate(# fot the congruency effect on nontarget images
target_img_id = pmap(list(stim, image_up_id, image_mid_id, image_low_id, 1), fun_arrangeimages),
nontarget_img1_id = pmap(list(stim, image_up_id, image_mid_id, image_low_id, 2), fun_arrangeimages),
nontarget_img2_id = pmap(list(stim, image_up_id, image_mid_id, image_low_id, 3), fun_arrangeimages),
target_img_cat = map2_chr(target_img_id, rule, fun_category),
nontarget_img1_cat = map2_chr(nontarget_img1_id, rule, fun_category),
nontarget_img2_cat = map2_chr(nontarget_img2_id, rule, fun_category),
incongruence_score_stim = case_when(
target_img_cat == nontarget_img1_cat & target_img_cat == nontarget_img2_cat ~ 0,
target_img_cat != nontarget_img1_cat & target_img_cat != nontarget_img2_cat ~ 2,
TRUE ~ 1
),
# for the congruency effect on irrelavant rules
target_img_allcat = map(target_img_id, fun_fullcat),
target_img_irrelavantcat1 = pmap(list(target_img_allcat, target_img_cat, 1), fun_irrelavant_cat),
target_img_irrelavantcat2 = pmap(list(target_img_allcat, target_img_cat, 2), fun_irrelavant_cat),
target_img_irrelavantcat1_mapping = pmap(list(target_img_irrelavantcat1, resp_map_age, resp_map_size, resp_map_location), fun_irrelavant_cat_mapping),
target_img_irrelavantcat2_mapping = pmap(list(target_img_irrelavantcat2, resp_map_age, resp_map_size, resp_map_location), fun_irrelavant_cat_mapping),
target_img_irrelavantcat1_key = map2(target_img_irrelavantcat1,  target_img_irrelavantcat1_mapping, fun_irrelavant_cat_key),
target_img_irrelavantcat2_key = map2(target_img_irrelavantcat2,  target_img_irrelavantcat2_mapping, fun_irrelavant_cat_key),
incongruence_score_rule = case_when(
correct_key == target_img_irrelavantcat1_key & correct_key == target_img_irrelavantcat2_key ~ 0,
correct_key != target_img_irrelavantcat1_key & correct_key != target_img_irrelavantcat2_key ~ 2,
TRUE ~ 1
)
) %>%
select(!(target_img_id:nontarget_img2_cat)) %>%
select(!(target_img_allcat:target_img_irrelavantcat2_key))
View(bigdf)
r <- bigdf[c(5,601,4901),]
View(r)
r <- bigdf[c(572,6011,49),]
View(r)
accThres <- 0.6
lowacc_subject <- bigdf %>%
group_by(subject, block_type, trial_nature) %>%
summarise(
count = n(),
accRate = sum(accuracy)/length(accuracy)
) %>%
mutate(exclude = (accRate < accThres)) %>%
filter(exclude == TRUE) %>%
ungroup()
View(lowacc_subject)
# exclude them
length(unique(lowacc_subject$subject)) # the number of subjects excluded
bigdf_ex_lowacc_sub <- filter(bigdf, !(subject %in% unique(lowacc_subject$subject))) # the data frame without low acc subjects
sum(bigdf_ex_lowacc_sub$subject %in% unique(lowacc_subject$subject))                 # should be zero
# for the target RT and acc rate
target_outlier_subject <- bigdf_ex_lowacc_sub %>%
group_by(subject) %>%
summarise(
count = n(),
meanRT = mean(rt, na.rm = TRUE),
medianRT = median(rt, na.rm = TRUE),
accRate = sum(accuracy)/length(accuracy)
) %>%
mutate(
grandmean_RT = mean(medianRT),
sd_RT = sd(medianRT),
lowBound_RT = grandmean_RT - 2.5*sd_RT,
highBound_RT = grandmean_RT + 2.5*sd_RT,
grandmean_acc = mean(accRate),
sd_acc = sd(accRate),
lowBound_acc = grandmean_acc - 2.5*sd_acc,
highBound_acc = grandmean_acc + 2.5*sd_acc,
exclude_RT = (medianRT < lowBound_RT | medianRT > highBound_RT),
exclude_acc = (accRate < lowBound_acc | accRate > highBound_acc),
exclude = exclude_RT | exclude_acc
) %>%
filter(exclude == TRUE) %>%
ungroup()
View(target_outlier_subject)
library(here)
library(here)
here()
library(here)
library(feather)
library(tidyverse)
library(rstatix)
load(file = paste0(here(), "/results/bigdf_fmri.Rdata"))
glimpse(bigdf)
ntrials <- 54*8 # number of trials per participant
bigdf <- bigdf %>%
mutate(reg_color = case_when(
reg_color == "(178, 0, 237)" | reg_color == "#B200ED" ~ "violet",
reg_color == "(59, 177, 67)" | reg_color == "#3BB143" ~ "green",
TRUE ~ "r"),
trial_id = str_c(subject, block_id, trial_num, sep = "_"),
CTI_length = if_else(CTI <= 5000, "short", "long")
) %>%
select(!(ITI_onset:time_elapsed))
range(bigdf$rt, na.rm = TRUE)
load(file = paste0(here(), "/results/bigdf_fmri.Rdata"))
library(here)
library(feather)
library(tidyverse)
library(rstatix)
load(file = paste0(here(), "/results/bigdf_fmri.Rdata"))
glimpse(bigdf)
ntrials <- 54*8 # number of trials per participant
bigdf <- bigdf %>%
mutate(reg_color = case_when(
reg_color == "(178, 0, 237)" | reg_color == "#B200ED" ~ "violet",
reg_color == "(59, 177, 67)" | reg_color == "#3BB143" ~ "green",
TRUE ~ "r"),
trial_id = str_c(subject, block_id, trial_num, sep = "_"),
CTI_length = if_else(CTI <= 5000, "short", "long")
) %>%
select(!(ITI_onset:time_elapsed))
length(unique(bigdf$subject))
fun_arrangeimages <- function(stimulus, image1, image2, image3, index) {
imgvec <- c(image1, image2, image3)
logicalvec <- str_detect(imgvec, stimulus)
target_img <- imgvec[logicalvec]
nontarget_img1 <- imgvec[!logicalvec][1]
nontarget_img2 <- imgvec[!logicalvec][2]
if (index == 1) {
return(target_img)
} else if (index == 2) {
return(nontarget_img1)
} else {
return(nontarget_img2)
}
}
fun_category <- function(img_id, rule) {
category <- case_when(
rule == "age" ~ str_sub(img_id, -5, -5),
rule == "size" ~ str_sub(img_id, -3, -3),
rule == "location" ~ str_sub(img_id, -1, -1)
)
return(category)
}
fun_fullcat <- function(img_id) {
first_cat <- str_sub(img_id, -5, -5)
second_cat <- str_sub(img_id, -3, -3)
third_cat <- str_sub(img_id, -1, -1)
fullcat <- c(first_cat, second_cat, third_cat)
return(fullcat)
}
fun_irrelavant_cat <- function(fullcat, relavantcat, index) {
logicalvec <- str_detect(fullcat, relavantcat)
irrelavant_cat_1 <- fullcat[!logicalvec][1]
irrelavant_cat_2 <- fullcat[!logicalvec][2]
if (index == 1) {
return(irrelavant_cat_1)
} else {
return(irrelavant_cat_2)
}
}
fun_irrelavant_cat_mapping <- function(cat, map_age, map_size, map_location) {
mapping <- case_when(
cat %in% c("o", "y") ~ map_age,
cat %in% c("b", "s") ~ map_size,
cat %in% c("w", "l") ~ map_location
)
return(mapping)
}
fun_irrelavant_cat_key <- function(cat, mapping) {
if (mapping == 0) {
correctkey <- case_when(
cat %in% c("y", "s", "w") ~ 1,
cat %in% c("o", "b", "l") ~ 2
)
} else {
correctkey <- case_when(
cat %in% c("y", "s", "w") ~ 2,
cat %in% c("o", "b", "l") ~ 1
)
}
return(correctkey)
}
bigdf <- bigdf %>%
mutate(# fot the congruency effect on nontarget images
target_img_id = pmap(list(stim, image_up_id, image_mid_id, image_low_id, 1), fun_arrangeimages),
nontarget_img1_id = pmap(list(stim, image_up_id, image_mid_id, image_low_id, 2), fun_arrangeimages),
nontarget_img2_id = pmap(list(stim, image_up_id, image_mid_id, image_low_id, 3), fun_arrangeimages),
target_img_cat = map2_chr(target_img_id, rule, fun_category),
nontarget_img1_cat = map2_chr(nontarget_img1_id, rule, fun_category),
nontarget_img2_cat = map2_chr(nontarget_img2_id, rule, fun_category),
incongruence_score_stim = case_when(
target_img_cat == nontarget_img1_cat & target_img_cat == nontarget_img2_cat ~ 0,
target_img_cat != nontarget_img1_cat & target_img_cat != nontarget_img2_cat ~ 2,
TRUE ~ 1
),
# for the congruency effect on irrelavant rules
target_img_allcat = map(target_img_id, fun_fullcat),
target_img_irrelavantcat1 = pmap(list(target_img_allcat, target_img_cat, 1), fun_irrelavant_cat),
target_img_irrelavantcat2 = pmap(list(target_img_allcat, target_img_cat, 2), fun_irrelavant_cat),
target_img_irrelavantcat1_mapping = pmap(list(target_img_irrelavantcat1, resp_map_age, resp_map_size, resp_map_location), fun_irrelavant_cat_mapping),
target_img_irrelavantcat2_mapping = pmap(list(target_img_irrelavantcat2, resp_map_age, resp_map_size, resp_map_location), fun_irrelavant_cat_mapping),
target_img_irrelavantcat1_key = map2(target_img_irrelavantcat1,  target_img_irrelavantcat1_mapping, fun_irrelavant_cat_key),
target_img_irrelavantcat2_key = map2(target_img_irrelavantcat2,  target_img_irrelavantcat2_mapping, fun_irrelavant_cat_key),
incongruence_score_rule = case_when(
## Here the congruency score is ONLY correct if the trial is a regular trial
correct_key == target_img_irrelavantcat1_key & correct_key == target_img_irrelavantcat2_key ~ 0,
correct_key != target_img_irrelavantcat1_key & correct_key != target_img_irrelavantcat2_key ~ 2,
TRUE ~ 1
)
) %>%
select(!(target_img_id:nontarget_img2_cat)) %>%
select(!(target_img_allcat:target_img_irrelavantcat2_key))
accThres <- 0.6
lowacc_subject <- bigdf %>%
group_by(subject, block_type, trial_nature) %>%
summarise(
count = n(),
accRate = sum(accuracy)/length(accuracy)
) %>%
mutate(exclude = (accRate < accThres)) %>%
filter(exclude == TRUE) %>%
ungroup()
View(lowacc_subject)
# exclude them
length(unique(lowacc_subject$subject)) # the number of subjects excluded
bigdf_ex_lowacc_sub <- filter(bigdf, !(subject %in% unique(lowacc_subject$subject))) # the data frame without low acc subjects
sum(bigdf_ex_lowacc_sub$subject %in% unique(lowacc_subject$subject))                 # should be zero
# for the target RT and acc rate
target_outlier_subject <- bigdf_ex_lowacc_sub %>%
group_by(subject) %>%
summarise(
count = n(),
meanRT = mean(rt, na.rm = TRUE),
medianRT = median(rt, na.rm = TRUE),
accRate = sum(accuracy)/length(accuracy)
) %>%
mutate(
grandmean_RT = mean(medianRT),
sd_RT = sd(medianRT),
lowBound_RT = grandmean_RT - 2.5*sd_RT,
highBound_RT = grandmean_RT + 2.5*sd_RT,
grandmean_acc = mean(accRate),
sd_acc = sd(accRate),
lowBound_acc = grandmean_acc - 2.5*sd_acc,
highBound_acc = grandmean_acc + 2.5*sd_acc,
exclude_RT = (medianRT < lowBound_RT | medianRT > highBound_RT),
exclude_acc = (accRate < lowBound_acc | accRate > highBound_acc),
exclude = exclude_RT | exclude_acc
) %>%
filter(exclude == TRUE) %>%
ungroup()
View(target_outlier_subject)
### import all packages ----
library(here)
library(tidyverse)
fun_RespToDbl <- function(dataframe) {
# in the case of missing trial, the response and rt would be null, which need to changed into NA double
if (typeof(dataframe$rt) != "double"){
dataframe$rt <- parse_double(dataframe$rt, na = "null")
dataframe$response <- parse_double(dataframe$response, na = "null")
}
return(dataframe)
}
### specify input/output directories and the subjects to run ----
root_dir <- here("scanner")
root_o_dir <- "/Users/mengqiao/Documents/fMRI_task_transform/MRI_data/Task_transform/first_level/univariate/GLM-01/events"
subjs_no <- c(5,6)
bids_subjs <- paste0("sub-00", subjs_no)
#### for one subject, load the data ----
bids_subj <- "sub-005"
input_subj_dir <- file.path(root_dir, bids_subj)
output_subj_dir <- file.path(root_o_dir, bids_subj)
list_rawdata <- list.files(path = input_subj_dir,
recursive = TRUE,
pattern = "*.csv",
full.name = TRUE)
bigdf <- list_rawdata %>%
lapply(read_csv) %>%
lapply(fun_RespToDbl) %>%
bind_rows() %>%
mutate(CTI_length = if_else(CTI <= 5000, "short", "long"))
glimpse(bigdf)
# first select the trials that we want to look at
# in practice, the accuracy and the trial type(either regular or transform trials) would be relevant to pick up the trials of interest
trials_int <- bigdf %>%
filter(accuracy == TRUE)
#####-- Event: Transform Cues ("q2") ----
# Only for transform trials, to account for the BOLD response right after the CTI offset
q2_dfs <- trials_int %>%
filter(trial_nature == "TF") %>%
select(subject, run_id, block_type, CTI_length, tranCue_onset, tranCue_offset) %>%
mutate(duration = tranCue_offset - tranCue_onset)
View(q2_dfs)
#####-- Event: Transform Cues ("q2") ----
# Only for transform trials, to account for the BOLD response right after the CTI offset
q2_dfs <- trials_int %>%
filter(trial_nature == "TF") %>%
select(subject, run_id, block_type, CTI_length, tranCue_onset, tranCue_offset) %>%
mutate(duration = tranCue_offset - tranCue_onset) %>%
group_by(run_id) %>%
group_split()
View(q2_dfs)
####-- Event: Stimulus("s") for Error trials ----
s_error_dfs <- trials_error %>%
select(subject, run_id, stim_onset, stim_offset) %>%
mutate(duration = stim_offset - stim_onset) %>%
group_by(run_id) %>%
group_split()
t
# first select the trials that we are not interested in but need to account for in GLM
# in practice, the accuracy and the trial type(either regular or transform trials) would be relevant to pick up the trials of interest
trials_error <- bigdf %>%
filter(accuracy == FALSE)
####-- Event: Stimulus("s") for Error trials ----
s_error_dfs <- trials_error %>%
select(subject, run_id, stim_onset, stim_offset) %>%
mutate(duration = stim_offset - stim_onset) %>%
group_by(run_id) %>%
group_split()
View(s_error_dfs)
library(here)
library(tidyverse)
fun_RespToDbl <- function(dataframe) {
# in the case of missing trial, the response and rt would be null, which need to changed into NA double
if (typeof(dataframe$rt) != "double"){
dataframe$rt <- parse_double(dataframe$rt, na = "null")
dataframe$response <- parse_double(dataframe$response, na = "null")
}
return(dataframe)
}
root_dir <- here("scanner")
root_o_dir <- "/Users/mengqiao/Documents/fMRI_task_transform/MRI_data/Task_transform/first_level/univariate/GLM-01/events"
subjs_no <- c(5,6)
bids_subjs <- paste0("sub-00", subjs_no)
#### for one subject, load the data ----
bids_subj <- "sub-003"
input_subj_dir <- file.path(root_dir, bids_subj)
output_subj_dir <- file.path(root_o_dir, bids_subj)
preproc_rootdir <- "/Users/mengqiao/Documents/fMRI_task_transform/MRI_data/Task_transform/preprocess/results_fmriprep/new_results/prep_23.1.0"
preproc_subj_dir <- file.path(preproc_rootdir, bids_subj)
preproc_subj_dir
no_ses <- 2 # number of scanning sessions
no_run <- 4 # number of functional runs per session
a = 5
string(a)
for(ses in 1:no_ses) {
bids_ses <- paste0("ses_mri0", as.character(ses))
print(bids_ses)
}
ses <- 1
func_dir <- file.path(preproc_subj_dir, bids_ses, "func")
func_dir
run <- 2
name_conf_file <- paste0(bids_subj, "_", bids_ses, "_task-transform_acq-ep2d_dir-COL_run-", as.character(run), "desc-confounds_timeseries.tsv")
name_conf_file
bids_ses <- paste0("ses_mri0", as.character(ses))
name_conf_file <- paste0(bids_subj, "_", bids_ses, "_task-transform_acq-ep2d_dir-COL_run-", as.character(run), "desc-confounds_timeseries.tsv")
name_conf_file
name_conf_file <- paste0(bids_subj, "_", bids_ses, "_task-transform_acq-ep2d_dir-COL_run-", as.character(run), "_desc-confounds_timeseries.tsv")
name_conf_file
conf_file_df <- read_tsv(file.path(func_dir, name_conf_file))
bids_ses <- paste0("ses_mri0", as.character(ses))
func_dir <- file.path(preproc_subj_dir, bids_ses, "func")
func_dir
conf_file_df <- read_tsv(file.path(func_dir, name_conf_file))
bids_ses <- paste0("ses-mri0", as.character(ses))
func_dir <- file.path(preproc_subj_dir, bids_ses, "func")
name_conf_file <- paste0(bids_subj, "_", bids_ses, "_task-transform_acq-ep2d_dir-COL_run-", as.character(run), "_desc-confounds_timeseries.tsv")
conf_file_df <- read_tsv(file.path(func_dir, name_conf_file))
View(conf_file_df)
names(conf_file_df)
conf_file_df <- read_tsv(file.path(func_dir, name_conf_file)) %>%
select("trans_x", "trans_y", "trans_z", "rot_x", "rot_y", "rot_z", "global_signal", "framewise_displacement" "csf", "white_matter")
conf_file_df <- read_tsv(file.path(func_dir, name_conf_file)) %>%
select("trans_x", "trans_y", "trans_z", "rot_x", "rot_y", "rot_z", "global_signal", "framewise_displacement" "csf", "white_matter")
conf_file_df <- read_tsv(file.path(func_dir, name_conf_file)) %>%
select("trans_x", "trans_y", "trans_z", "rot_x", "rot_y", "rot_z", "global_signal", "framewise_displacement", "csf", "white_matter")
View(conf_file_df)
glimspse(conf_file_df)
glimpse(conf_file_df)
View(conf_file_df)
View(conf_file_df)
conf_file_df$framewise_displacement(conf_file_df$framewise_displacement == "n/a") <- 0
conf_file_df$framewise_displacement[conf_file_df$framewise_displacement == "n/a"] <- 0
View(conf_file_df)
glimpse(conf_file_df)
conf_file_df$framewise_displacement <- as.numeric(conf_file_df$framewise_displacement)
glimpse(conf_file_df)
sess_spm <- run + 4 * (ses - 1)
sum_ses <- 2 # number of scanning sessions
sum_run <- 4 # number of functional runs per session
name_txt <- paste0(bids_subj, "_run-", sess_spm, "_conf_regs.txt")
i
write.table(conf_file_df, file = file.path(output_subj_dir, name_txt), sep = "\t", row.names = FALSE)
for(ses in 1:sum_ses) {
bids_ses <- paste0("ses-mri0", as.character(ses))
func_dir <- file.path(preproc_subj_dir, bids_ses, "func")
for(run in 1:sum_run) {
sess_spm <- run + 4 * (ses - 1)
name_conf_file <- paste0(bids_subj, "_", bids_ses, "_task-transform_acq-ep2d_dir-COL_run-", as.character(run), "_desc-confounds_timeseries.tsv")
conf_file_df <- read_tsv(file.path(func_dir, name_conf_file)) %>%
select("trans_x", "trans_y", "trans_z", "rot_x", "rot_y", "rot_z", "global_signal", "framewise_displacement", "csf", "white_matter")
conf_file_df$framewise_displacement[conf_file_df$framewise_displacement == "n/a"] <- 0
conf_file_df$framewise_displacement <- as.numeric(conf_file_df$framewise_displacement)
name_txt <- paste0(bids_subj, "_run-", sess_spm, "_conf_regs.txt")
write.table(conf_file_df, file = file.path(output_subj_dir, name_txt), sep = "\t", row.names = FALSE)
}
}
? write.table
ses = 1
run = 1
bids_ses <- paste0("ses-mri0", as.character(ses))
func_dir <- file.path(preproc_subj_dir, bids_ses, "func")
sess_spm <- run + 4 * (ses - 1)
name_conf_file <- paste0(bids_subj, "_", bids_ses, "_task-transform_acq-ep2d_dir-COL_run-", as.character(run), "_desc-confounds_timeseries.tsv")
conf_file_df <- read_tsv(file.path(func_dir, name_conf_file)) %>%
select("trans_x", "trans_y", "trans_z", "rot_x", "rot_y", "rot_z", "global_signal", "framewise_displacement", "csf", "white_matter")
conf_file_df <- read_tsv(file.path(func_dir, name_conf_file)) %>%
select("trans_x", "trans_y", "trans_z", "rot_x", "rot_y", "rot_z", "global_signal", "framewise_displacement", "csf", "white_matter") %>%
slice(-(1:sum_dummyscans))
sum_dummyscans <- 5 # IMPORTANT! the data corresponding to the dummy scans need to be disarded.
conf_file_df <- read_tsv(file.path(func_dir, name_conf_file)) %>%
select("trans_x", "trans_y", "trans_z", "rot_x", "rot_y", "rot_z", "global_signal", "framewise_displacement", "csf", "white_matter") %>%
slice(-(1:sum_dummyscans))
conf_file_df$framewise_displacement[conf_file_df$framewise_displacement == "n/a"] <- 0
conf_file_df$framewise_displacement <- as.numeric(conf_file_df$framewise_displacement)
name_txt <- paste0(bids_subj, "_run-", sess_spm, "_conf_regs_2.txt")
write.table(conf_file_df, file = file.path(output_subj_dir, name_txt), sep = "\t", row.names = FALSE, col.names = FALSE)
for(ses in 1:sum_ses) {
bids_ses <- paste0("ses-mri0", as.character(ses))
func_dir <- file.path(preproc_subj_dir, bids_ses, "func")
for(run in 1:sum_run) {
sess_spm <- run + 4 * (ses - 1)
name_conf_file <- paste0(bids_subj, "_", bids_ses, "_task-transform_acq-ep2d_dir-COL_run-", as.character(run), "_desc-confounds_timeseries.tsv")
conf_file_df <- read_tsv(file.path(func_dir, name_conf_file)) %>%
select("trans_x", "trans_y", "trans_z", "rot_x", "rot_y", "rot_z", "global_signal", "framewise_displacement", "csf", "white_matter") %>%
slice(-(1:sum_dummyscans))
conf_file_df$framewise_displacement[conf_file_df$framewise_displacement == "n/a"] <- 0
conf_file_df$framewise_displacement <- as.numeric(conf_file_df$framewise_displacement)
name_txt <- paste0(bids_subj, "_run-", sess_spm, "_conf_regs.txt")
write.table(conf_file_df, file = file.path(output_subj_dir, name_txt), sep = "\t", row.names = FALSE, col.names = FALSE)
}
}
subj = 3
paste0("sub-00", subj)
2:7
all_subjs <- c(2:5,7:11,13:17,20:44,46:49)
all_subs
all_subjs
? rm()
source("~/Documents/fMRI_task_transform/Behav_data/R_scripts/gen_fmri_events.R", echo=TRUE)
View(q2_df)
rm()
source("~/Documents/fMRI_task_transform/Behav_data/R_scripts/sanity_check_events.R", echo=TRUE)
source("~/Documents/fMRI_task_transform/Behav_data/R_scripts/gen_fmri_events.R", echo=TRUE)
source("~/Documents/fMRI_task_transform/Behav_data/R_scripts/gen_fmri_events.R", echo=TRUE)
source("~/Documents/fMRI_task_transform/Behav_data/R_scripts/gen_fmri_events.R", echo=TRUE)
subjs <- c(42:44,46:48) # subjects to run
subjs
source("~/Documents/fMRI_task_transform/Behav_data/R_scripts/gen_fmri_events.R", echo=TRUE)
source("~/Documents/fMRI_task_transform/Behav_data/R_scripts/gen_fmri_events.R", echo=TRUE)
